apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "ua.com.sofon.workoutlogger"
        minSdkVersion 15
        targetSdkVersion 23
		  versionCode generateVersionCode()
		  versionName generateVersionName()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:design:23.2.0'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:recyclerview-v7:23.2.0'
    compile 'com.android.support:cardview-v7:23.2.0'
    compile 'com.github.PhilJay:MPAndroidChart:v2.1.3'
    testCompile 'junit:junit:4.12'
}

apply from: "../artifacts.gradle"

/**
 * Генерация имя версии приложения с данным считаными с local.properties
 * @return Имя версии приложения
 */
def generateVersionName() {
    def file = new File("local.properties")
    def props = new Properties()
    props.load(new FileInputStream(file));
    if (props.version != null && props.date != null) {
//		return version.toString() + "." + props.revision + " (" + props.date + ")"
        return version.toString() + " (" + props.date + ")"
    } else {
        return version.toString()
    }
}

/**
 * Сгенерировать код версии сборки проекта.
 * @return Код версии сборки проекта.
 */
def generateVersionCode() {
    //The rules is as follows:
    //-SNAPSHOT counts as 0
    //-RC* counts as the RC number, i.e. 1 to 98
    //final release counts as 99.
    //Thus you can only have 98 Release Candidates, which ought to be enough for everyone

    def candidate = "99"
    def (major, minor, patch) = version.toLowerCase().replaceAll('-', '').tokenize('.')
    if (patch.endsWith("snapshot")) {
        candidate = "0"
        patch = patch.replaceAll("[^0-9]", "")
    } else {
        def rc
        (patch, rc) = patch.tokenize("rc")
        if (rc) {
            candidate = rc
        }
    }

    (major, minor, patch, candidate) = [major, minor, patch, candidate].collect {
        it.toInteger()
    }

    writeSvnRevIntoLocalProperties(new File("local.properties"))
    return (major * 1000000) + (minor * 10000) + (patch * 100) + candidate;
}

/**
 * Записать праметры в файл настроек.
 * Параметры:
 * 	version - название версии сборки (задано в файле gradle.properties)
 * 	revision - номер ревизи SVN, последней модификации проекта.
 * 	date - дата сборки проекта.
 * @param file Файл настроек, в который будут записаны параметры.
 */
def writeSvnRevIntoLocalProperties(File file) {
//	Runtime rt = Runtime.getRuntime();
//	Process pr = rt.exec("svnversion");
//	String lastRev = pr.getText();
//	if (lastRev.contains(":")) {
//		lastRev = lastRev.substring(0, lastRev.indexOf(":"));
//		lastRev.replace("M", "");
//		lastRev.replace("S", "");
//		lastRev.replace("P", "");
//	}
//	lastRev = lastRev.substring(lastRev.indexOf("Last Changed Rev: ") + 18,
//			lastRev.indexOf("Last Changed Date:") - 1)
//	println "Last Changed Rev: " + lastRev

    def props = new Properties()
    props.load(new FileInputStream(file));
    props.version = version
//	props.revision = lastRev
    props.date = Date.newInstance().format('dd.MM.yyyy')
    file.withWriter {
        props.store(it, null)
    }
}
